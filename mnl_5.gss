/*--------------------------------------------------------------------
					This is model for
--------------	Firm Location Choice Model---------------------------
					Jason Hawkins
				     Jan 29, 2019
               Add latent auction prices to MNL bid-rent model
----------------------------------------------------------------------*/
new;
cls;
screen on;

// I think the combination of similarly valued parameters can be accomplished by switching to a manual definition and shifting the 1 for a 
// NAICS alternative, or similar, to the corresponding column/row.

@--------Loading the data-----------------------------------------------@
id = dbAddDatabase("PSQL");
dbSetHostName(id, "localhost");
dbSetPort(id, 5432);
dbSetDatabaseName(id, "ggha_commercial");
dbSetUserName(id, "postgres");
dbSetPassword(id, "postgres");
ret = dbOpen(id);

qid = dbExecQuery(id, "SELECT sid, chosen, naics_cnl_ct_1km, naics_3d_ct_1km, naics_cnl, alt_id, tot_sales_emp,
                bld_area, taz_pop, credit_id, gross_rent FROM public.working_data_1_per ORDER BY sid, alt_id");
@---Array columns: 1: sid, 2: chosen, 3: naics_cnl_ct_1km, 4: naics_3d_ct_1km, 5: naics_cnl, 6: alt_id,
               7: tot_sales_emp, 8: build_area, 9: taz_pop, 10: credit_id, 11: gross_rent ---@
INPUT =  dbQueryFetchAllM(qid);
save INPUT;
dbClose(id);

load INPUT;

NOBS =rows(INPUT);
NHEAD = 2;
NNAICS = 9; // 10 - 1 for identification since area held constant for all alternatives
NALTS = 59;
NALTS_C = 22; // 30 - 1 for identification since area held constant for all alternatives
NSITS = NOBS / NALTS;
NNESTS = 1;
// CHECK ME: need to update when adding/removing variables!
NVARS = NALTS_C+2;

// Indicates whether to include latent auction component (normal dist)
INC_RENTS = 1;

vChosen = INPUT[., 2];
chosen = reshape(vChosen, NSITS, NALTS);

DATA = zeros(NOBS, NVARS+1);

// When combining, could switch out alt_id to combine, so series from 1-28 for example
alts = zeros(NOBS, NALTS_C);
altCodes = seqa(1,1,NALTS_C);
// Combine alt_ids: 8, 9, 10, 12, 13, 19, 21 into 6
INPUT[INPUT[.,6].==8, 6] = 6;

threadfor i(1, rows(altCodes), 1);
    alts[., i] = (INPUT[., 6].==altCodes[i]);
threadendfor;

// Population of area (logged) - seems to give problem for alts 13, 19, and 21 because poorly scaled
//DATA[., 1:NALTS_C] = alts .* ln(INPUT[., 9]);
// Area of building (logged)
DATA[., 1:NALTS_C] = alts .* ln(INPUT[., 8]);

// Count the number of similar firms (by naics_cnl) as 100s within 500m. Different industries different distances?
DATA[., NALTS_C+1] = INPUT[., 3] ./ 10^2;
// Total sales per employee
DATA[., NALTS_C+2] = ln(INPUT[., 7]);
// Assuming that 'x' is the output of the 'ln' call
x = DATA[., 2];
if iscplx(x);
    print "complex matrix sent to 'ln' 1";
    end;
endif;
//// Credit rating id of firm (very good or excellent wrt good)
//threadfor i(1, 2, 1);
//    DATA[., NALTS_C+2+i] = (INPUT[., 10].==i+1);
//threadendfor;

if INC_RENTS==1;
    DATA[., NVARS+1] = INPUT[.,11];
endif;

@-------LIKELIHOOD FUNCTION---------------------------------------------@

proc lpr(bn, x);
	local v, vmu3D, p13D, p23D, num, denom, p, LLR, cLLR, asc, v3D;
    local alpha, gam, sig, Ri, xi, r, sdenom;
    // Variable order is ASC (1-30), NAICS_AREA (31-40)
    v3D = areshape(x[.,1:NVARS], NSITS|NALTS|NVARS);
    
    alpha = bn[rows(bn)-2];
    gam = bn[rows(bn)-1];
    sig = abs(bn[rows(bn)]);
    
    /* Get the utility function */
    v = v3D * bn[1:NVARS,1];
    
    /* Create a 3d matrix of records x alts x nests (can sum across each dimension. Very cool!)
       Take exponential over the nests */
    vmu3D = zeros(NSITS * NALTS, NNESTS);
    vmu3D = areshape(vmu3D, NSITS|NALTS|NNESTS);
    vmu3D = exp(v);

    /* Component 1 */
    p13D = zeros(NSITS*NALTS, NNESTS);
    p13D = areshape(p13D, NSITS|NALTS|NNESTS);
    denom = asum(vmu3D, 2);
    denom = atranspose(areshape(denom, NALTS|NSITS|NNESTS), 2|1|3);
    p13D = vmu3D ./ denom;
    
    p = p13D;
    
    if INC_RENTS==1;
        Ri = x[.,cols(x)];
        Ri = arraytomat(areshape(Ri, NSITS|NALTS));
        Ri = Ri[.,1];
        sdenom = sumr(arraytomat(atranspose(denom, 3|1|2)));
        xi = Ri - alpha - gam * ln(sdenom);
        r = pdfn(xi, 0, sig);
    endif;
    
    p = asum(p, 1);
    p = arraytomat(atranspose(p,3|1|2));
    if INC_RENTS==1;
        LLR = p.*r;
    else;
        LLR = p;
    endif;
    
    cLLR = LLR .* chosen;
    cLLR = ln(sumr(cLLR));
    // Assuming that 'cLLR' is the output of the 'ln' call
    if iscplx(cLLR);
        print "complex matrix sent to 'ln' 3";
        end;
    endif;
    retp(cLLR[.,1]);
endp;

/*------Starting Values of the Parameters-*/
B = 0.1*ones(NVARS,1);

if INC_RENTS==1;
     // Latent auction parameters
    B = B|0|3|50;
//    B = {0.10580469 
//    0.0060486881
//    -0.084440023 
//       3.5791815 
//       22.389503 };
endif;
      
/*------DO NOT CHANGE ANYTHING BELOW------------------------------*/
@-----Calling MAXLIK and provide Likelihood function---------------@

print "Starting values:" ;
print B ;
library maxlik,pgraph ;
#include maxlik.ext ;
maxset ;
  if INC_RENTS==1;
      _max_Active = ones(NVARS,1)|ones(3,1);
  else;
      _max_Active = ones(NVARS,1);
  endif;
  _max_Algorithm=2;  /* 1=STEEP, 2=BFGS, 3=DFP, 4=NEWTON, 5=BHHH, 6=PRCG */
  _max_LineSearch=2;
  _max_GradTol=5e-4;
  _max_MaxIters=1500;
  _max_CovPar=1;  /* 0=none, 1=H^-1, 2=(gg')^-1, 3=2*1*2 */
//  _max_Switch = {2,
//                0.00001,
//                1500,
//                0.0001};
__title = "GTA Firms Multinomial Location Choice";

{ coeff,f,g,cov,ret } = maxprt(maxlik(DATA,0,&lpr,B)); 
print ;
print ;

print coeff ;
print (_max_FinalHess);
print cov;
