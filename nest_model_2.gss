/*--------------------------------------------------------------------
					This is model for
--------------	Firm Location Choice Model---------------------------
					Jason Hawkins
				     July 21, 2018
               Nested model with variables
----------------------------------------------------------------------*/
new;
cls;
screen on;

@ Setting the output file @
output file = "/home/jason/Documents/Conference Submissions/TRB2019/outputs/output2.out";

@--------Loading the data-----------------------------------------------@
id = dbAddDatabase("PSQL");
dbSetHostName(id, "localhost");
dbSetPort(id, 5433);
dbSetDatabaseName(id, "ggha_business_2017");
dbSetUserName(id, "postgres");
dbSetPassword(id, "postgres");
ret = dbOpen(id);

qid = dbExecQuery(id, "SELECT sid, chosen, parcel_id, naics_cnl_ct, naics_3d_ct, naics_8d_ct, naics_cnl, alt_id, tot_sales_emp,
                build_area, height, area_ind, area_res FROM public.working_data_cnl_10_per ORDER BY sid");
@---Array columns: 1: sid, 2: chosen, 3: parcel_id, 4: naics_cnl_ct, 5: naics_3d_ct, 6: naics_8d_Ct, 7: naics_cnl, 8: alt_id,
               9: tot_sales_emp, 10: build_area, 11: height, 12: area_ind, 13: area_res ---@
INPUT =  dbQueryFetchAllM(qid);
save INPUT;
dbClose(id);

NOBS =rows(INPUT);
NHEAD = 4;
NNAICS = 9; // 10 - 1 for identification since area held constant for all alternatives
NALTS = 31;
NASC = NALTS - 1;
NSITS = NOBS / NALTS;
NNESTS = 4;
// CHECK ME: need to update when adding/removing variables!
NVARS = NASC+NNAICS+2;

vChosen = INPUT[., 2];
chosen = reshape(vChosen, NSITS, NALTS);

DATA = zeros(NOBS, NVARS);
threadfor i(1, NASC, 1);
    DATA[., i] = (INPUT[., 8].==i+1);
threadendfor;

naics = zeros(NOBS, NNAICS);
naicsCodes = {2,3,42,44,5,6,7,8,9};
threadfor i(1, rows(naicsCodes), 1);
    DATA[., NASC+i] = (INPUT[., 7].==naicsCodes[i]);
threadendfor;

// Area of parcel and industry code (by naics_cnl). Can also use height and volume.
datArea = INPUT[., 10] ./ 10^3;
datHeight = INPUT[., 11];
datVol = datArea .* datHeight;
DATA[., NASC+1:NASC+NNAICS] = DATA[., NASC+1:NASC+NNAICS] .* datArea;

// Count the number of similar firms (by naics_cnl) as 100s
DATA[., NASC+NNAICS+1] = INPUT[., 4] ./ 10^2;
// Total sales per employee
DATA[., NASC+NNAICS+2] = log(INPUT[., 9]);

arrNest = zeros(NALTS, NNESTS);
/* Head nest start with just nested */
arrNest[1,1] = 1;
arrNest[4,1] = 1;
arrNest[8,1] = 1;
arrNest[13,1] = 1;
arrNest[17,1] = 1;
arrNest[21,1] = 1;
arrNest[25,1] = 1;
arrNest[28,1] = 1;
/* Branch nest */
arrNest[2,2] = 1;
arrNest[5,2] = 1;
arrNest[9,2] = 1;
arrNest[11,2] = 1;
arrNest[14,2] = 1;
arrNest[18,2] = 1;
arrNest[22,2] = 1;
arrNest[26,2] = 1;
arrNest[29,2] = 1;
/* Single loc nest */
arrNest[3,3] = 1;
arrNest[6,3] = 1;
arrNest[7,3] = 1;
arrNest[10,3] = 1;
arrNest[12,3] = 1;
arrNest[16,3] = 1;
arrNest[20,3] = 1;
arrNest[24,3] = 1;
arrNest[27,3] = 1;
arrNest[31,3] = 1;
/* Subsid nest */
arrNest[15,4] = 1;
arrNest[19,4] = 1;
arrNest[23,4] = 1;
arrNest[30,4] = 1;
/* Other service nest */
@
arrNest[0,4] = 1;
arrNest[1,4] = 1;
arrNest[2,4] = 1;
@
/* Retail nest */
@
arrNest[3,5] = 1;
arrNest[4,5] = 1;
arrNest[5,5] = 1;
@
/* Government nest */
@
arrNest[6,6] = 1;
@
/* Arts nest */
@
arrNest[7,7] = 1;
arrNest[8,7] = 1;
arrNest[9,7] = 1;
@
/* Agriculture nest */
@
arrNest[10,8] = 1;
arrNest[11,8] = 1;
@
/* Wholesale nest */
@
arrNest[12,9] = 1;
arrNest[13,9] = 1;
arrNest[14,9] = 1;
arrNest[15,9] = 1;
@
/* Professional services nest */
@
arrNest[16, 10] = 1;
arrNest[17, 10] = 1;
arrNest[18, 10] = 1;
arrNest[19, 10] = 1;
@
/* Heavy industry nest */
@
arrNest[20, 11] = 1;
arrNest[21, 11] = 1;
arrNest[22, 11] = 1;
arrNest[23, 11] = 1;
@
/* Institutional nest */
@
arrNest[24, 12] = 1;
arrNest[25, 12] = 1;
arrNest[26, 12] = 1;
@
/* Manufacturing nest */
@
arrNest[27, 13] = 1;
arrNest[28, 13] = 1;
arrNest[29, 13] = 1;
arrNest[30, 13] = 1;
@

@-------LIKELIHOOD FUNCTION---------------------------------------------@

proc lpr(bn, x);
	local Mu, MuMat, v, vmu3D, p13D, p23D, num, denom, denomMat, IV, p, LLR, cLLR, asc, v3D;
    // Variable order is ASC (1-30), NAICS_AREA (31-40)
    v3D = areshape(x[.,1:NVARS], NSITS|NALTS|NVARS);
    Mu = arrNest .* areshape(bn[NVARS+1:NVARS+NNESTS,1], 1|NNESTS);
    Mu = areshape(Mu, NSITS|NALTS|NNESTS);

    /* Get the utility function */
    v = v3D * bn[1:NVARS,1];
    
    /* Create a 3d matrix of records x alts x nests (can sum across each dimension. Very cool!)
       Take exponential over the nests */
    vmu3D = zeros(NSITS * NALTS, NNESTS);
    vmu3D = areshape(vmu3D, NSITS|NALTS|NNESTS);
    vmu3D = exp(v .* Mu).* areshape(arrNest, NSITS|NALTS|NNESTS);

    /* Component 1 */
    p13D = zeros(NSITS*NALTS, NNESTS);
    p13D = areshape(p13D, NSITS|NALTS|NNESTS);
    denom = asum(vmu3D, 2);
    denom = atranspose(areshape(denom, NALTS|NSITS|NNESTS), 2|1|3);
    p13D = vmu3D ./ denom;

    /* Component 2 */
    p23D = zeros(NSITS, NNESTS);
    denomMat = arraytomat(atranspose(denom[.,1,.], 2|1|3));
    IV = log(denomMat);
    MuMat = arraytomat(atranspose(amax(Mu, 2), 2|1|3));
    num = IV ./ MuMat;
    p23D = num ./ sumr(num);
    // Dimension to repeat along should be given first, then columns, then rows
    p23D = atranspose(areshape(p23D, NALTS|NSITS|NNESTS), 2|1|3);
    
    p = p13D .* p23D;
    LLR = asum(p, 1);
    LLR = arraytomat(atranspose(LLR,3|1|2));
    cLLR = LLR .* chosen;
    cLLR = ln(sumr(cLLR));
    retp(cLLR[.,1]);
    
endp;

/*------Starting Values of the Parameters-*/

B={
       3.2519351 
       8.3118727 
      0.49184449 
       6.6259870 
       8.2997360 
       5.8185624 
     -0.73238274 
       5.4017742 
       7.6803250 
      0.14719355 
      0.95201729 
    0.0037186738 
       4.3638141 
      0.40090373 
       7.3951621 
      -1.4786140 
       5.8524511 
      -1.9402804 
       8.9800133 
      0.64332696 
       2.0038863 
     0.067650833 
       7.7699316 
    -0.095650672 
       2.7642381 
       8.4885076 
      0.41324389 
       2.2672917 
      0.23352529 
       7.2338605 
      -1.5760702 
   -0.0068736097 
    -0.094148547 
       0.0000000 
    -0.069643764 
     0.019508920 
   -0.0032308538 
   -0.0014818148 
     0.034543952
      0.77433998 
   3.8225300e-05 
       1.0000000 
       1.0000000  
       1.0000000 
       1.0000000 
	};
      
/*------DO NOT CHANGE ANYTHING BELOW------------------------------*/
@-----Calling MAXLIK and provide Likelihood function---------------@

print "Starting values:" ;
print B ;
library maxlik,pgraph ;
#include maxlik.ext ;
maxset ;
  _max_Active = ones(NVARS+NNESTS-1,1)|0;
  _max_Algorithm=2;  /* 1=STEEP, 2=BFGS, 3=DFP, 4=NEWTON, 5=BHHH, 6=PRCG */
  _max_LineSearch=2;
  _max_GradTol=5e-4;
  _max_MaxIters=1500;
  _max_CovPar=2;  /* 0=none, 1=H^-1, 2=(gg')^-1, 3=2*1*2 */
//  _max_Switch = {2,
//                0.00001,
//                1500,
//                0.0001};
__title = "GTA Firms Nested Location Choice";

{ coeff,f,g,cov,ret } = maxprt(maxlik(DATA,0,&lpr,B)); 
print ;
print ;

print coeff ;
print (_max_FinalHess);
print cov;

//===============================================================================
//                    GTA Firms Nested Location Choice                     
//===============================================================================
// MAXLIK Version 5.0.9                                      7/24/2018   9:12 am
//===============================================================================

//return code =    0
//normal convergence

//Mean log-likelihood      -0.0810957
//Number of cases     642878

//Covariance matrix of the parameters computed by the following method:
//Cross-product of first derivatives

//Parameters    Estimates     Std. err.  Est./s.e.  Prob.    Gradient
//------------------------------------------------------------------
//P01              3.1577        0.4321    7.307   0.0000      0.0000
//P02              8.3581        0.4309   19.396   0.0000      0.0000
//P03              0.4307        0.5887    0.732   0.4644      0.0000
//P04              6.5925        0.4254   15.496   0.0000      0.0000
//P05              8.3819        0.4322   19.393   0.0000      0.0000
//P06              5.7429        0.4233   13.567   0.0000      0.0000
//P07             -0.7690        0.9561   -0.804   0.4213      0.0000
//P08              5.3841        0.4236   12.710   0.0000      0.0000
//P09              7.6832        0.4288   17.919   0.0000      0.0000
//P10              0.0875        0.9250    0.095   0.9246      0.0000
//P11              0.9379        0.4878    1.923   0.0545      0.0000
//P12             -0.0072        0.5029   -0.014   0.9885      0.0000
//P13              4.1128        0.4296    9.574   0.0000      0.0000
//P14              0.3401        0.6373    0.534   0.5936      0.0000
//P15              7.4283        0.4284   17.341   0.0000      0.0000
//P16             -1.4571        0.4568   -3.190   0.0014      0.0000
//P17              5.7302        0.4203   13.635   0.0000      0.0000
//P18             -1.9958        0.5151   -3.874   0.0001      0.0000
//P19              8.9398        0.4344   20.581   0.0000      0.0000
//P20              0.6685        0.4930    1.356   0.1751      0.0000
//P21              2.0500        0.4472    4.584   0.0000      0.0000
//P22              0.0264        0.9577    0.028   0.9780      0.0000
//P23              7.9181        0.4306   18.389   0.0000      0.0001
//P24             -0.1525        0.8000   -0.191   0.8488      0.0000
//P25              2.7427        0.4309    6.364   0.0000      0.0000
//P26              8.4130        0.4311   19.515   0.0000      0.0000
//P27              0.3804        0.5623    0.676   0.4988      0.0000
//P28              2.2657        0.4365    5.191   0.0000      0.0000
//P29              0.1884        0.6104    0.309   0.7576      0.0000
//P30              7.2610        0.4282   16.957   0.0000      0.0000
//P31             -0.0304        0.0216   -1.406   0.1598      0.0000
//P32             -0.0003        0.0158   -0.018   0.9855      0.0001
//P33              0.0142        0.0100    1.411   0.1582     -0.0001
//P34             -0.0059        0.0037   -1.586   0.1128      0.0000
//P35             -0.0283        0.0113   -2.504   0.0123      0.0002
//P36              0.0006        0.0043    0.141   0.8879      0.0000
//P37              0.0015        0.0074    0.208   0.8355      0.0001
//P38             -0.0339        0.0186   -1.822   0.0684     -0.0001
//P39              0.0093        0.0173    0.535   0.5924      0.0000
//P40              0.8139        0.0144   56.538   0.0000     -0.0001
//P41             -0.0544        0.0100   -5.455   0.0000      0.0000
//P42              0.6020        0.0121   49.868   0.0000      0.0001
//P43              0.5818        0.0113   51.486   0.0000      0.0001
//P44              0.5553        0.0106   52.286   0.0000     -0.0001
//P45              1.0000             .        .        .      0.0009
