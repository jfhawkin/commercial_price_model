/*--------------------------------------------------------------------
					This is model for
--------------	Student Move TO CNL Model---------------------------
					Md Sami Hasnine
				     July 4, 2016
----------------------------------------------------------------------*/

new;
cls;
screen on;

@ Setting the output file @
output file = C:\gauss14\OUTPUTFILES\sp10.out;


@--------Loading the data-----------------------------------------------@

load DATA[3208,322] = C:\Users\CIV455\Downloads\Studenttripmorning2.txt;
print DATA[.,1];
save DATA ;
NOBS =rows(DATA);
CONST= ones(NOBS,1);

@-------LIKELIHOOD FUNCTION---------------------------------------------@


proc lpr(bn,x);
    local VR,Base, PR,LLR, upperbase,lowerbase,problower,probupper;
    local Mu,IV,Qm,upperAvail;
    local V,D, P, L, LL, i, n, m;
    local Check1,Check2,Check3,Check4,Check5,Check6;
    local alpha, counter,allocation;
    /*
    mode classification and nesting structure:
    1. AD: Auto Drive
    
    2. AP: Auto Passenger
    
    
    2. AP: Auto Passenger
    3. LT: Local Transit
    4. P&R: Park and Ride
    5. K&R: Kiss and Ride
    6. B&R: Bike and Ride
    
    7. W: Walk
    8. B: Bike
    9. B&R: Bike and Ride
    */
    VR=zeros(NOBS,8);   @--->Systematic utility of Logit Probability--@
    PR=zeros(NOBS,8);   @--->Conditional Probability in full observed choice set------------------@
    LLR=zeros(NOBS,1);
    Mu=zeros(NOBS,3); // 1 is auto nest, two is transit/driven nest, 3 is activie nest
    lowerbase=zeros(NOBS,3); // 1 is auto base, 2 is transit base, 3 is active base
    problower=zeros(NOBS,9);
    IV=zeros(NOBS,3);
    upperbase=zeros(NOBS,1);
    probupper=zeros(NOBS,3);
    check1 = zeros(nobs,1);
    upperAvail = zeros(NOBS,3);
    allocation = zeros(NOBS,2);
    /* ivtt,cost,ovtt	*/
    
    @----Systematic Utility Components---@
    VR[.,1]=(0).*CONST[.,1]     +bn[8].*(x[.,170]+x[.,269])                                                      +bn[10].*x[.,171]                                                                                    +bn[16].*(x[.,6]./x[.,4])                                                                                                                                                             +bn[40].*x[.,5]./x[.,4]                                                                                                                             +bn[47].*(x[.,315]./1000);//      	                                     					                     ;//
    VR[.,2]=bn[1].*CONST[.,1]   +bn[8].*x[.,170]./(2)                                                            +bn[10].*x[.,171]                                                                                                                                                               +bn[19].*(x[.,24].==1).*((x[.,31].==1).or(x[.,31].==6).or(x[.,31].==7)) +bn[26].*((x[.,25].>18).and(x[.,25].<=22))+bn[33].*((x[.,25].>22).and(x[.,25].<=25))                                                                                                                                         			+bn[48].*(x[.,315]./1000);//       																													                              ;//
    VR[.,3]=bn[2].*CONST[.,1]   +bn[8].*x[.,172]                                                                 +bn[10].*x[.,173]   +bn[10].*x[.,175] +bn[10].*x[.,174]                                                                        +bn[17].*(x[.,40].==1)  +bn[18].*(x[.,41].==1)   +bn[20].*(x[.,24].==1).*((x[.,31].==1).or(x[.,31].==6).or(x[.,31].==7)) +bn[27].*((x[.,25].>18).and(x[.,25].<=22))+bn[34].*((x[.,25].>22).and(x[.,25].<=25))                             +bn[42].*(x[.,215]) +bn[43].*(x[.,223]./1000)+bn[44].*(x[.,228]./1000)+bn[45].*(x[.,238]./1000)						+bn[49].*(x[.,315]./1000);//                                                                 
    VR[.,4]=bn[3].*CONST[.,1]   +bn[9].*(x[.,172]+x[.,269]+x[.,177].*(1.41*40)./(1000*60))./(x[.,178]./1000)     +bn[10].*x[.,173]    +bn[10].*x[.,176] +bn[10].*x[.,174]                                             +bn[16].*(x[.,6]./x[.,4])	+bn[17].*(x[.,40].==1)  +bn[18].*(x[.,41].==1)   +bn[21].*(x[.,24].==1).*((x[.,31].==1).or(x[.,31].==6).or(x[.,31].==7)) +bn[28].*((x[.,25].>18).and(x[.,25].<=22))+bn[35].*((x[.,25].>22).and(x[.,25].<=25))                                                                                                                               						+bn[50].*(x[.,315]./1000);//                                                                  					                                                    	    						                       						                                 				 ;//
    VR[.,5]=bn[4].*CONST[.,1]   +bn[9].*(x[.,172] +x[.,177].*(1.41*40)./(2*1000*60))./(x[.,178]./1000)           +bn[10].*x[.,173]   +bn[10].*x[.,176] +bn[10].*x[.,174]                                                                       +bn[17].*(x[.,40].==1)  +bn[18].*(x[.,41].==1)    +bn[22].*(x[.,24].==1).*((x[.,31].==1).or(x[.,31].==6).or(x[.,31].==7)) +bn[29].*((x[.,25].>18).and(x[.,25].<=22))+bn[36].*((x[.,25].>22).and(x[.,25].<=25))                                                                                                                                					+bn[51].*(x[.,315]./1000);//                                                        		                         			  		 						 				                   ;//
    VR[.,6]=bn[5].*CONST[.,1]   +bn[8].*x[.,172]                                                                 +bn[10].*x[.,173]   +bn[10].*x[.,177] +bn[10].*x[.,174]                                                                       +bn[17].*(x[.,40].==1)  +bn[18].*(x[.,41].==1)    +bn[23].*(x[.,24].==1).*((x[.,31].==1).or(x[.,31].==6).or(x[.,31].==7)) +bn[30].*((x[.,25].>18).and(x[.,25].<=22))+bn[37].*((x[.,25].>22).and(x[.,25].<=25))                                                                                                                                 					+bn[15].*(x[.,315]./1000);//                                                                                                                                                                                                                           +bn[33].*x[.,309]./1000  	                              					 						                                                   ;//
    VR[.,7]=bn[6].*CONST[.,1]                                                                                                                                         +bn[11].*(x[.,178]./1000)                                                                                                  +bn[24].*(x[.,24].==1).*((x[.,31].==1).or(x[.,31].==6).or(x[.,31].==7)) +bn[31].*((x[.,25].>18).and(x[.,25].<=22))+bn[38].*((x[.,25].>22).and(x[.,25].<=25))                                                                                                                                                            ;//                                                                                                                                                                                                 ;//
    VR[.,8]=bn[7].*CONST[.,1]                                                                                                                                         +bn[12].*(x[.,178]./1000)                                                                                                  +bn[25].*(x[.,24].==1).*((x[.,31].==1).or(x[.,31].==6).or(x[.,31].==7)) +bn[32].*((x[.,25].>18).and(x[.,25].<=22))+bn[39].*((x[.,25].>22).and(x[.,25].<=25))+bn[41].*x[.,5]./x[.,4]                                                                                                       +bn[46].*(x[.,42].==1)   ;//                                                                                                                                                             ;//
    @-------------------------------------------------------------------------------------------------------------------@
    allocation[.,1]= ones(nobs,1);
    allocation[.,2]= ones(nobs,1);
    //assume active modes are correlated with BOB;
    @---Definie Nesting structure ------------------------------------------------------------------------------------------------@
    //scales
    Mu[.,1] = CONST[.,1];//+exp(bn[13].*CONST[.,1]); //auto
    Mu[.,2] = CONST[.,1]+exp(bn[13].*CONST[.,1]); //transit
    Mu[.,3] = CONST[.,1]+exp(bn[14].*CONST[.,1]); //active
    //
    
    //demons for each nest
    lowerbase[.,1] = exp(VR[.,1].*Mu[.,1]).*(x[.,204].>-1)+exp(VR[.,2].*Mu[.,1]).*(x[.,205].>-1);
    lowerbase[.,2] = exp(VR[.,3].*Mu[.,2]).*(x[.,207].>-1)+exp(VR[.,4].*Mu[.,2]).*(x[.,208].>-1)+exp(VR[.,5].*Mu[.,2]).*(x[.,209].>-1)+exp(VR[.,6].*Mu[.,2]).*(x[.,210].>-1).*allocation[.,1];
    lowerbase[.,3] = exp(VR[.,7].*Mu[.,3]).*(x[.,211].>-1) + exp(VR[.,8].*Mu[.,3]).*(x[.,212].>-1) +exp(VR[.,6].*Mu[.,3]).*(x[.,210].>-1).*allocation[.,2];
    //probabilities for each alternative conditional on nest
    
    
    problower[.,1] = (exp(VR[.,1].*Mu[.,1]).*(x[.,204].>-1))./lowerbase[.,1];
    problower[.,2] = (exp(VR[.,2].*Mu[.,1]).*(x[.,205].>-1))./lowerbase[.,1];
    
    problower[.,3] = (exp(VR[.,3].*Mu[.,2]).*(x[.,207].>-1))./lowerbase[.,2];
    problower[.,4] = (exp(VR[.,4].*Mu[.,2]).*(x[.,208].>-1))./lowerbase[.,2];
    problower[.,5] = (exp(VR[.,5].*Mu[.,2]).*(x[.,209].>-1))./lowerbase[.,2];
    problower[.,6] = (exp(VR[.,6].*Mu[.,2]).*(x[.,210].>-1).*allocation[.,1])./lowerbase[.,2];
    
    
    problower[.,7] = (exp(VR[.,7].*Mu[.,3]).*(x[.,211].>-1))./lowerbase[.,3];
    problower[.,8] = (exp(VR[.,8].*Mu[.,3]).*(x[.,212].>-1))./lowerbase[.,3];
    problower[.,9] = (exp(VR[.,6].*Mu[.,3]).*(x[.,210].>-1)).*allocation[.,2]./lowerbase[.,3];
    
    i = 1;
    for i(1,NOBS,1);
        if(lowerbase[i,1] == 0);
            problower[i,1] = 0;
            problower[i,2] = 0;
        endif;
        if(lowerbase[i,2] == 0);
            problower[i,3] = 0;
            problower[i,4] = 0;
            problower[i,5] = 0;
            problower[i,6] = 0;
        endif;
        if(lowerbase[i,3] == 0); 
            problower[i,7] = 0;
            problower[i,8] = 0;
            problower[i,9] = 0;
        endif;
    endfor;
    //calculate nest includive values
    IV[.,1] = ln(Lowerbase[.,1])./(mu[.,1]);
    IV[.,2] = ln(Lowerbase[.,2])./(mu[.,2]);
    IV[.,3] = ln(Lowerbase[.,3])./(mu[.,3]);
    counter = 1;
    
    for counter(1,3,1);
        i = 1;
        for i (1,NOBS,1);
            if(lowerbase[i,counter] != 0);
                upperAvail[i,counter] = 1.0;
            else;
                IV[i,counter] = 0.0;
            endif;
        endfor;
    endfor;
    //calculate uppernest base
    counter =1;
    for counter(1,3,1);
        upperbase[.,1] = upperbase[.,1] + exp(IV[.,counter]).*upperAvail[.,counter];
    endfor;
    //calculate uppernest probabilities
    probupper[.,1] = (exp(IV[.,1]).*upperAvail[.,1])./upperbase[.,1];
    probupper[.,2] = (exp(IV[.,2]).*upperAvail[.,2])./upperbase[.,1];
    probupper[.,3] = (exp(IV[.,3]).*upperAvail[.,3])./upperbase[.,1];
    //calculate actual probability
    PR[.,1] = probupper[.,1] .* problower[.,1];
    PR[.,2] = probupper[.,1] .* problower[.,2];
    PR[.,3] = probupper[.,2] .* problower[.,3];
    PR[.,4] = probupper[.,2] .* problower[.,4];
    PR[.,5] = probupper[.,2] .* problower[.,5];
    PR[.,6] = probupper[.,2] .* problower[.,6] + probupper[.,3] .* problower[.,9];
    PR[.,7] = probupper[.,3] .* problower[.,7];
    PR[.,8] = probupper[.,3] .* problower[.,8];
    @--Finished Calculating Choice Set Probability------------------------------------------------------------@
    i = 1;
    do while (i<=8);
        check1[.,1] =check1[.,1]+PR[.,i];
        i = i +1;
    endo;
    
    LLR[.,1]=ln(PR[.,1].*(x[.,204].==1)
        +PR[.,2].*(x[.,205].==1)
        +PR[.,3].*(x[.,207].==1)
        +PR[.,4].*(x[.,208].==1)
        +PR[.,5].*(x[.,209].==1)
        +PR[.,6].*(x[.,210].==1)
        +PR[.,7].*(x[.,211].==1)
        +PR[.,8].*(x[.,212].==1));
    @--------------------------------------------------------------@
    
    retp(LLR[.,1]);
    
endp;

/*------Starting Values of the Parameters-*/

B={
      0.77419779 
       1.9714344 
      -2.8570841 
     -0.30958460 
      -1.0009970 
       6.5098385 
       3.1645168 
     -0.21376873 
      -3.2515615 
   -0.0010865419 
      -1.5898311 
     -0.47822001 
      -1.3299170 
      -1.7470011 
      0.78761982 
       4.0410742 
       1.7856030 
      0.85779092 
      0.24771397 
      0.15430257 
      0.60980894 
      0.47853222 
     -0.87148151 
     -0.28003071 
     -0.24580340 
      0.39494202 
      0.30237878 
    -0.065807014 
      0.21937982 
      -1.6576001 
      0.13920114 
      0.10477049 
     -0.57923119 
     -0.28243489 
     -0.14270450 
     -0.50243961 
     -0.75844357 
      0.23025343 
      0.46479155 
      0.68773691 
      -1.2471075 
    0.0020409639 
     -0.35784199 
    -0.049564866 
    -0.017950301 
      0.98727053 
    -0.024677944 
    -0.032850966 
   -0.0073158242 
   -0.0042193022 
   -0.0055023118 
 
	 
	  
    };






















/*------DO NOT CHANGE ANYTHING BELOW------------------------------*/
@-----Calling MAXLIK and provide Likelihood function---------------@

print "Starting values:" ;
print B ;

library maxlik,pgraph ;
#include maxlik.ext ;
maxset ;
_max_Algorithm=2;  /* 1=Steep, 2=BFGS, 3=DFP, 4=Newton, 5=BHHH */
_max_LineSearch=2;
_max_GradTol=5e-4;
_max_MaxIters=1500;
_max_CovPar=2;  /* 0=none, 1=H^-1, 2=(gg')^-1, 3=2*1*2 */
__title = "Student MoveTo CNL Mode Choice Model";

{beta,f,g,cov,ret} = maxlik(DATA,0,&lpr,B) ;
call maxprt(beta,f,g,cov,ret) ;
print ;
print beta ;
print (_max_FinalHess);


